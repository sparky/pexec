pexec - easily run multiple commands in parallel

demonstration:
	http://ep09.pld-linux.org/~sparky/pexec.avi

USAGE:
* Instalation (do it once):
  - copy ParallelExec to some directory perl is looking into, you can check
    which those are with this command: perl -le 'print "@INC"'
  - put "pexec" command to some directory from $PATH

* Startup (do it at beggining of any session):
  - start pexec server:
    $ pexec server
  - start as many pexec workers as you wish, each one in separate
    console/terminal/screen window/tmux slice, i.e.:
    $ for N in $(seq $(getconf _NPROCESSORS_ONLN)); do \
        ( xterm -e pexec worker & ); \
      done
  - TIP: you should prepare a shell script which does that automatically

* Use it (do it as often as you wish):
  - prefix each command you want to run in parallel with "pexec add"
    $ pexec add convert -verbose -scale 1024x1024 "$F" "_/$F"
    $ pexec add lame -h --abr 160 "$F" "_/$F"
    $ pexec add mencoder -ovc [something something] -o out.avi in.avi
  - if you need to make sure all processes are finished before continuing
    (useful in scripts) call:
    $ pexec wait || echo "At least $? processes failed"
  - TIP: use some short alias for pexec add:
    $ alias p="pexec add"


TODO:
- fix "pexec append"
  --> done, I think
- more robust workers; make sure workers are alive, restart job if worker dies
- add "pexec set -e" - it should kill all remaining jobs from ppid and not
  allow new ones until "pexec wait"
- allow longer commands / larger environment
  --> partially done (uses zlib compression)
- pexec add/append should be able to return [internal pid]
- add "pexec kill [pid]" command, where pid is [internal pid], "parent" or "killall"
- add possibility to suggest resources usage when adding commands, this way
  the just right number of processes will be running to use it at 100%
  eg: -c25 - uses 25% of cpu (1 core in 4 core cpu),
      -n80 - uses 80% of network
      -h90 - uses 90% of hard drives
